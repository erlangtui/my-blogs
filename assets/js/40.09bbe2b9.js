(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{367:function(v,_,t){"use strict";t.r(_);var e=t(4),d=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"一、简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、简介"}},[v._v("#")]),v._v(" 一、简介")]),v._v(" "),_("h3",{attrs:{id:"_1-redis-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-特点"}},[v._v("#")]),v._v(" 1，redis 特点")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("数据持久：")]),v._v(" 可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用；")]),v._v(" "),_("li",[_("strong",[v._v("数据多样：")]),v._v(" 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储；")]),v._v(" "),_("li",[_("strong",[v._v("数据备份：")]),v._v(" 即 master-slave 模式的数据备份；")])]),v._v(" "),_("h3",{attrs:{id:"_2-redis-优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis-优势"}},[v._v("#")]),v._v(" 2，redis 优势")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("读写性能极高：")]),v._v(" Redis 能读的速度是110000次/s,写的速度是81000次/s；")]),v._v(" "),_("li",[_("strong",[v._v("数据类型丰富：")]),v._v(" Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作；")]),v._v(" "),_("li",[_("strong",[v._v("原子层面操作：")]),v._v(" Redis 的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行；")]),v._v(" "),_("li",[_("strong",[v._v("特性丰富多样：")]),v._v(" Redis 还支持 publish/subscribe, 通知, key 过期等特性；")])]),v._v(" "),_("h3",{attrs:{id:"_3-redis特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis特性"}},[v._v("#")]),v._v(" 3，redis特性：")]),v._v(" "),_("ul",[_("li",[v._v("速度快：\n"),_("ul",[_("li",[v._v("读10w/s，写8.1w/s；")]),v._v(" "),_("li",[v._v("原因：内存存放、C语言实现、单线程无多线程竞争问题；")])])]),v._v(" "),_("li",[v._v("基于键值对构建；")]),v._v(" "),_("li",[v._v("功能丰富：\n"),_("ul",[_("li",[v._v("键过期功能，实现缓存；")]),v._v(" "),_("li",[v._v("发布订阅，实现消息系统；")]),v._v(" "),_("li",[v._v("Lua脚本，构建新命令；")]),v._v(" "),_("li",[v._v("事务，保证事务特性；")]),v._v(" "),_("li",[v._v("pipeline，减少网络开销；")])])]),v._v(" "),_("li",[v._v("简单稳定：\n"),_("ul",[_("li",[v._v("原因：源码少，单线程模型，不需要依赖操作系统类库；")])])]),v._v(" "),_("li",[v._v("客户端语言多：\n"),_("ul",[_("li",[v._v("基于tcp协议编程；")]),v._v(" "),_("li",[v._v("Java、Python、C++……；")])])]),v._v(" "),_("li",[v._v("可持久化：\n"),_("ul",[_("li",[v._v("RDB和AOF两种方式将数据持久化到硬盘，重启能恢复；")])])]),v._v(" "),_("li",[v._v("主从复制：\n"),_("ul",[_("li",[v._v("读写分离；")]),v._v(" "),_("li",[v._v("多个数据副本；")])])]),v._v(" "),_("li",[v._v("高可用和分布式：\n"),_("ul",[_("li",[v._v("故障发现和自动转移；")]),v._v(" "),_("li",[v._v("可扩展；")])])])]),v._v(" "),_("h3",{attrs:{id:"_4-redis-数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-数据类型"}},[v._v("#")]),v._v(" 4，redis 数据类型")]),v._v(" "),_("ul",[_("li",[v._v("redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset(sorted set：有序集合)；")])]),v._v(" "),_("h3",{attrs:{id:"_5-启动与关闭相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-启动与关闭相关"}},[v._v("#")]),v._v(" 5，启动与关闭相关")]),v._v(" "),_("ul",[_("li",[v._v("redis 可执行文件说明")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("可执行文件")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("redis-server")]),v._v(" "),_("td",[v._v("启动redis服务")])]),v._v(" "),_("tr",[_("td",[v._v("redis-cli")]),v._v(" "),_("td",[v._v("启动redis客户端")])]),v._v(" "),_("tr",[_("td",[v._v("redis-benchmark")]),v._v(" "),_("td",[v._v("redis基准测试工具")])]),v._v(" "),_("tr",[_("td",[v._v("redis-check-aof")]),v._v(" "),_("td",[v._v("redis aof 持久化文件检测和修复工具")])]),v._v(" "),_("tr",[_("td",[v._v("redis-check-dump")]),v._v(" "),_("td",[v._v("redis rdb 持久化文件检测和修复工具")])]),v._v(" "),_("tr",[_("td",[v._v("redis-sentinel")]),v._v(" "),_("td",[v._v("启动redis哨兵模式")])])])]),v._v(" "),_("ul",[_("li",[v._v("redis 启动\n"),_("ul",[_("li",[v._v("默认配置：\n"),_("ul",[_("li",[v._v("命令：redis-server；")]),v._v(" "),_("li",[v._v("使用默认配置文件：/usr/local/redis-6.2.4/redis.conf；")])])]),v._v(" "),_("li",[v._v("参数启动：\n"),_("ul",[_("li",[v._v("命令：redis-server --configKey1 configValue1 --configKey2 configValue2;")]),v._v(" "),_("li",[v._v("eg：redis-server --port 8888;")]),v._v(" "),_("li",[v._v("其他未修改的参数依然使用默认配置文件中的默认参数，且自定义参数不会保存到配置文件中；")])])]),v._v(" "),_("li",[v._v("配置文件启动：\n"),_("ul",[_("li",[v._v("命令：redis-server /opt/redis/redis.conf;")])])])])])]),v._v(" "),_("h3",{attrs:{id:"_6-性能高的原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-性能高的原因"}},[v._v("#")]),v._v(" 6，性能高的原因")]),v._v(" "),_("ul",[_("li",[v._v("Redis使用了单线程架构和I/O多路复用模型来实现高性能的内存数据库服务；")]),v._v(" "),_("li",[v._v("命令到服务端后都会进入一个队列，然后被逐一执行；")]),v._v(" "),_("li",[v._v("单线程快速原因：\n"),_("ul",[_("li",[v._v("纯内存访问；")]),v._v(" "),_("li",[v._v("非阻塞io，epoll实现io多路复用；")]),v._v(" "),_("li",[v._v("单线程避免了线程切换和竞态产生的消耗；")])])])]),v._v(" "),_("h2",{attrs:{id:"二、redis-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、redis-命令"}},[v._v("#")]),v._v(" 二、redis 命令")]),v._v(" "),_("h3",{attrs:{id:"_1-客户端连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-客户端连接"}},[v._v("#")]),v._v(" 1，客户端连接")]),v._v(" "),_("ul",[_("li",[v._v("redis-cli -h 127.0.0.1 -p 6379 -a xxxxxx -n 1\n"),_("ul",[_("li",[v._v("-h  Server hostname (default: 127.0.0.1)，指定ip")]),v._v(" "),_("li",[v._v("-p  Server port (default: 6379)，指定端口，默认是6379")]),v._v(" "),_("li",[v._v("-a  Password to use when connecting to the server，连接密码")]),v._v(" "),_("li",[v._v("-n  Database number，指定的数据库")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("AUTH password")]),v._v(" "),_("td",[v._v("验证密码是否正确")])]),v._v(" "),_("tr",[_("td",[v._v("ECHO message")]),v._v(" "),_("td",[v._v("打印字符串")])]),v._v(" "),_("tr",[_("td",[v._v("PING")]),v._v(" "),_("td",[v._v("查看服务是否运行")])]),v._v(" "),_("tr",[_("td",[v._v("QUIT")]),v._v(" "),_("td",[v._v("关闭当前连接")])]),v._v(" "),_("tr",[_("td",[v._v("SELECT index")]),v._v(" "),_("td",[v._v("切换到指定的数据库")])])])]),v._v(" "),_("h3",{attrs:{id:"_2-key-相关操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-key-相关操作"}},[v._v("#")]),v._v(" 2，key 相关操作")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("DEL key")]),v._v(" "),_("td",[v._v("key 存在时删除 key")])]),v._v(" "),_("tr",[_("td",[v._v("DUMP key")]),v._v(" "),_("td",[v._v("序列化给定 key ，并返回被序列化的值")])]),v._v(" "),_("tr",[_("td",[v._v("EXISTS key")]),v._v(" "),_("td",[v._v("检查给定 key 是否存在")])]),v._v(" "),_("tr",[_("td",[v._v("EXPIRE key seconds")]),v._v(" "),_("td",[v._v("为给定 key 设置过期时间")])]),v._v(" "),_("tr",[_("td",[v._v("EXPIREAT key timestamp")]),v._v(" "),_("td",[v._v("为 key 设置过期时间，命令接受的时间参数是 UNIX 时间戳(unix timestamp)")])]),v._v(" "),_("tr",[_("td",[v._v("PEXPIRE key milliseconds")]),v._v(" "),_("td",[v._v("设置 key 的过期时间以毫秒计")])]),v._v(" "),_("tr",[_("td",[v._v("PEXPIREAT key milliseconds-timestamp")]),v._v(" "),_("td",[v._v("设置 key 过期时间的时间戳(unix timestamp) 以毫秒计")])]),v._v(" "),_("tr",[_("td",[v._v("MOVE key db")]),v._v(" "),_("td",[v._v("将当前数据库的 key 移动到给定的数据库 db 当中")])]),v._v(" "),_("tr",[_("td",[v._v("PERSIST key")]),v._v(" "),_("td",[v._v("移除 key 的过期时间，key 将持久保持")])]),v._v(" "),_("tr",[_("td",[v._v("TTL key")]),v._v(" "),_("td",[v._v("以秒为单位，返回给定 key 的剩余过期时间(TTL, time to live)")])]),v._v(" "),_("tr",[_("td",[v._v("PTTL key")]),v._v(" "),_("td",[v._v("以毫秒为单位返回 key 的剩余的过期时间")])]),v._v(" "),_("tr",[_("td",[v._v("RANDOMKEY")]),v._v(" "),_("td",[v._v("从当前数据库中随机返回一个 key")])]),v._v(" "),_("tr",[_("td",[v._v("RENAME key newkey")]),v._v(" "),_("td",[v._v("修改 key 的名称")])]),v._v(" "),_("tr",[_("td",[v._v("RENAMENX key newkey")]),v._v(" "),_("td",[v._v("仅当 newkey 不存在时，将 key 改名为 newkey")])]),v._v(" "),_("tr",[_("td",[v._v("TYPE key")]),v._v(" "),_("td",[v._v("返回 key 所储存的值的类型")])]),v._v(" "),_("tr",[_("td",[v._v("KEYS pattern")]),v._v(" "),_("td",[v._v("查找所有符合给定模式的 key")])]),v._v(" "),_("tr",[_("td",[v._v("SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]")]),v._v(" "),_("td",[v._v("基于游标 cursor 开始查询符合 pattern 的 "),_("strong",[v._v("key")]),v._v("，每次查询的数量是 count ，类型是 type 类型")])])])]),v._v(" "),_("h3",{attrs:{id:"_3-string-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-string-命令"}},[v._v("#")]),v._v(" 3，string 命令")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("SET key value")]),v._v(" "),_("td",[v._v("设置指定 key 的值")])]),v._v(" "),_("tr",[_("td",[v._v("GET key")]),v._v(" "),_("td",[v._v("获取指定 key 的值")])]),v._v(" "),_("tr",[_("td",[v._v("MSET key value [key value ...]")]),v._v(" "),_("td",[v._v("同时设置一个或多个 key-value 对")])]),v._v(" "),_("tr",[_("td",[v._v("MGET key1 [key2..]")]),v._v(" "),_("td",[v._v("获取所有(一个或多个)给定 key 的值")])]),v._v(" "),_("tr",[_("td",[v._v("GETBIT key offset")]),v._v(" "),_("td",[v._v("对 key 所储存的字符串值，获取指定偏移量上的位(bit)")])]),v._v(" "),_("tr",[_("td",[v._v("SETBIT key offset value")]),v._v(" "),_("td",[v._v("对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)")])]),v._v(" "),_("tr",[_("td",[v._v("SETRANGE key offset value")]),v._v(" "),_("td",[v._v("用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始")])]),v._v(" "),_("tr",[_("td",[v._v("GETRANGE key start end")]),v._v(" "),_("td",[v._v("返回 key 中字符串值的子字符")])]),v._v(" "),_("tr",[_("td",[v._v("GETSET key value")]),v._v(" "),_("td",[v._v("将给定 key 的值设为 value ，并返回 key 的旧值(old value)")])]),v._v(" "),_("tr",[_("td",[v._v("STRLEN key 返回 key")]),v._v(" "),_("td",[v._v("所储存的字符串值的长度")])]),v._v(" "),_("tr",[_("td",[v._v("SETEX key seconds value")]),v._v(" "),_("td",[v._v("设置 key 的值，并将 key 的过期时间设为 seconds (以秒为单位)")])]),v._v(" "),_("tr",[_("td",[v._v("PSETEX key milliseconds value")]),v._v(" "),_("td",[v._v("以毫秒为单位设置 key 的过期时间")])]),v._v(" "),_("tr",[_("td",[v._v("SETNX key value")]),v._v(" "),_("td",[v._v("只有在 key 不存在时设置 key 的值")])]),v._v(" "),_("tr",[_("td",[v._v("MSETNX key value [key value ...]")]),v._v(" "),_("td",[v._v("同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在")])]),v._v(" "),_("tr",[_("td",[v._v("INCR key")]),v._v(" "),_("td",[v._v("将 key 中储存的数字值增一")])]),v._v(" "),_("tr",[_("td",[v._v("INCRBY key increment")]),v._v(" "),_("td",[v._v("将 key 所储存的值加上给定的增量值（increment）")])]),v._v(" "),_("tr",[_("td",[v._v("INCRBYFLOAT key increment")]),v._v(" "),_("td",[v._v("将 key 所储存的值加上给定的浮点增量值（increment）")])]),v._v(" "),_("tr",[_("td",[v._v("DECR key")]),v._v(" "),_("td",[v._v("将 key 中储存的数字值减一")])]),v._v(" "),_("tr",[_("td",[v._v("DECRBY key decrement key")]),v._v(" "),_("td",[v._v("所储存的值减去给定的减量值（decrement）")])]),v._v(" "),_("tr",[_("td",[v._v("APPEND key value")]),v._v(" "),_("td",[v._v("如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾")])])])]),v._v(" "),_("h3",{attrs:{id:"_4-hash-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-hash-命令"}},[v._v("#")]),v._v(" 4，hash 命令")]),v._v(" "),_("ul",[_("li",[v._v("Redis hash 是一个string类型的field和value的映射表，特别适合用于存储对象，每个 hash 可以存储 232 - 1 键值对（40多亿）。\neg：hscan key1 0 match *.log count 100：从 key1 哈希表中的0下标开始查询键以 .log 结尾的键值对，每次查询100个；")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("HSET key field value")]),v._v(" "),_("td",[v._v("将哈希表 key 中的字段 field 的值设为 value")])]),v._v(" "),_("tr",[_("td",[v._v("HGET key field")]),v._v(" "),_("td",[v._v("获取存储在哈希表中指定字段的值")])]),v._v(" "),_("tr",[_("td",[v._v("HMSET key field1 value1 [field2 value2 ]")]),v._v(" "),_("td",[v._v("同时将多个 field-value 对设置到哈希表 key 中")])]),v._v(" "),_("tr",[_("td",[v._v("HMGET key field1 [field2]")]),v._v(" "),_("td",[v._v("获取所有给定字段的值")])]),v._v(" "),_("tr",[_("td",[v._v("HGETALL key")]),v._v(" "),_("td",[v._v("获取在哈希表中指定 key 的所有字段和值")])]),v._v(" "),_("tr",[_("td",[v._v("HKEYS key")]),v._v(" "),_("td",[v._v("获取所有哈希表中的字段")])]),v._v(" "),_("tr",[_("td",[v._v("HVALS key")]),v._v(" "),_("td",[v._v("获取哈希表中所有值")])]),v._v(" "),_("tr",[_("td",[v._v("HLEN key")]),v._v(" "),_("td",[v._v("获取哈希表中字段的数量")])]),v._v(" "),_("tr",[_("td",[v._v("HDEL key field2 [field2]")]),v._v(" "),_("td",[v._v("删除一个或多个哈希表字段")])]),v._v(" "),_("tr",[_("td",[v._v("HEXISTS key field")]),v._v(" "),_("td",[v._v("查看哈希表 key 中，指定的字段是否存在")])]),v._v(" "),_("tr",[_("td",[v._v("HINCRBY key field increment")]),v._v(" "),_("td",[v._v("为哈希表 key 中的指定字段的整数值加上增量 increment")])]),v._v(" "),_("tr",[_("td",[v._v("HINCRBYFLOAT key field increment")]),v._v(" "),_("td",[v._v("为哈希表 key 中的指定字段的浮点数值加上增量 increment")])]),v._v(" "),_("tr",[_("td",[v._v("HSETNX key field value")]),v._v(" "),_("td",[v._v("只有在字段 field 不存在时，设置哈希表字段的值")])]),v._v(" "),_("tr",[_("td",[v._v("HSCAN key cursor [MATCH pattern] [COUNT count]")]),v._v(" "),_("td",[v._v("从 key 哈希表中的 cursor 游标开始查询键符合 pattern 的 "),_("strong",[v._v("键值对")]),v._v(" ，每次查询的数量是 count")])])])]),v._v(" "),_("h3",{attrs:{id:"_5-list-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-list-命令"}},[v._v("#")]),v._v(" 5，list 命令")]),v._v(" "),_("ul",[_("li",[v._v("Redis list是简单的字符串列表，按照插入顺序排序。可以添加一个元素导列表的头部（左边）或者尾部（右边），一个列表最多可以包含 232 - 1 个元素 (40多亿个元素)。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("BLPOP key1 [key2 ] timeout")]),v._v(" "),_("td",[v._v("移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")])]),v._v(" "),_("tr",[_("td",[v._v("BRPOP key1 [key2 ] timeout")]),v._v(" "),_("td",[v._v("移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")])]),v._v(" "),_("tr",[_("td",[v._v("BRPOPLPUSH source destination timeout")]),v._v(" "),_("td",[v._v("从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")])]),v._v(" "),_("tr",[_("td",[v._v("RPOPLPUSH source destination")]),v._v(" "),_("td",[v._v("移除列表的最后一个元素，并将该元素添加到另一个列表并返回")])]),v._v(" "),_("tr",[_("td",[v._v("LPUSH key value1 [value2]")]),v._v(" "),_("td",[v._v("将一个或多个值插入到列表头部")])]),v._v(" "),_("tr",[_("td",[v._v("RPUSH key value1 [value2]")]),v._v(" "),_("td",[v._v("在列表中添加一个或多个值")])]),v._v(" "),_("tr",[_("td",[v._v("LPUSHX key value")]),v._v(" "),_("td",[v._v("将值插入到已存在的列表头部")])]),v._v(" "),_("tr",[_("td",[v._v("RPUSHX key value")]),v._v(" "),_("td",[v._v("将值插入到已存在的列表尾部")])]),v._v(" "),_("tr",[_("td",[v._v("LPOP key")]),v._v(" "),_("td",[v._v("移出并获取列表的第一个元素")])]),v._v(" "),_("tr",[_("td",[v._v("RPOP key")]),v._v(" "),_("td",[v._v("移除并获取列表最后一个元素")])]),v._v(" "),_("tr",[_("td",[v._v("LLEN key")]),v._v(" "),_("td",[v._v("获取列表长度")])]),v._v(" "),_("tr",[_("td",[v._v("LINDEX key index")]),v._v(" "),_("td",[v._v("通过索引获取列表中的元素")])]),v._v(" "),_("tr",[_("td",[v._v("LSET key index value")]),v._v(" "),_("td",[v._v("通过索引设置列表元素的值")])]),v._v(" "),_("tr",[_("td",[v._v("LRANGE key start stop")]),v._v(" "),_("td",[v._v("获取列表指定范围内的元素")])]),v._v(" "),_("tr",[_("td",[v._v("LTRIM key start stop")]),v._v(" "),_("td",[v._v("对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除")])]),v._v(" "),_("tr",[_("td",[v._v("LINSERT key BEFORE")]),v._v(" "),_("td",[v._v("AFTER pivot value")])]),v._v(" "),_("tr",[_("td",[v._v("LREM key count value")]),v._v(" "),_("td",[v._v("移除列表中值为 value 的元素，count 移除的数量，count<0时，从左往右；count>0时从右往左；count=0时，移除所有")])])])]),v._v(" "),_("h3",{attrs:{id:"_6-set命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-set命令"}},[v._v("#")]),v._v(" 6，set命令")]),v._v(" "),_("ul",[_("li",[v._v("Redis Set是string类型的无序集合；集合成员是唯一的，这就意味着集合中不能出现重复的数据；Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)；集合中最大的成员数为 232 - 1 (40多亿)。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("SADD key member1 [member2]")]),v._v(" "),_("td",[v._v("向集合添加一个或多个成员")])]),v._v(" "),_("tr",[_("td",[v._v("SCARD key")]),v._v(" "),_("td",[v._v("获取集合的成员数")])]),v._v(" "),_("tr",[_("td",[v._v("SDIFF key1 [key2]")]),v._v(" "),_("td",[v._v("返回给定所有集合的差集")])]),v._v(" "),_("tr",[_("td",[v._v("SDIFFSTORE destination key1 [key2]")]),v._v(" "),_("td",[v._v("返回给定所有集合的差集并存储在 destination 中")])]),v._v(" "),_("tr",[_("td",[v._v("SINTER key1 [key2]")]),v._v(" "),_("td",[v._v("返回给定所有集合的交集")])]),v._v(" "),_("tr",[_("td",[v._v("SINTERSTORE destination key1 [key2]")]),v._v(" "),_("td",[v._v("返回给定所有集合的交集并存储在 destination 中")])]),v._v(" "),_("tr",[_("td",[v._v("SISMEMBER key member")]),v._v(" "),_("td",[v._v("判断 member 元素是否是集合 key 的成员")])]),v._v(" "),_("tr",[_("td",[v._v("SMEMBERS key")]),v._v(" "),_("td",[v._v("返回集合中的所有成员")])]),v._v(" "),_("tr",[_("td",[v._v("SMOVE source destination member")]),v._v(" "),_("td",[v._v("将 member 元素从 source 集合移动到 destination 集合")])]),v._v(" "),_("tr",[_("td",[v._v("SPOP key")]),v._v(" "),_("td",[v._v("移除并返回集合中的一个随机元素")])]),v._v(" "),_("tr",[_("td",[v._v("SRANDMEMBER key [count]")]),v._v(" "),_("td",[v._v("返回集合中一个或多个随机数")])]),v._v(" "),_("tr",[_("td",[v._v("SREM key member1 [member2]")]),v._v(" "),_("td",[v._v("移除集合中一个或多个成员")])]),v._v(" "),_("tr",[_("td",[v._v("SUNION key1 [key2]")]),v._v(" "),_("td",[v._v("返回所有给定集合的并集")])]),v._v(" "),_("tr",[_("td",[v._v("SUNIONSTORE destination key1 [key2]")]),v._v(" "),_("td",[v._v("所有给定集合的并集存储在 destination 集合中")])]),v._v(" "),_("tr",[_("td",[v._v("SSCAN key cursor [MATCH pattern] [COUNT count]")]),v._v(" "),_("td",[v._v("迭代集合中的元素")])])])]),v._v(" "),_("h3",{attrs:{id:"_7-sorted-set-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-sorted-set-命令"}},[v._v("#")]),v._v(" 7，sorted set 命令")]),v._v(" "),_("ul",[_("li",[v._v("Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员；有序集合每个元素都会关联一个double类型的分数；redis 正是通过分数来为集合中的成员进行从小到大的排序；有序集合的成员是唯一的,但分数(score)却可以重复；集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)；集合中最大的成员数为 232 - 1 (40多亿个成员)。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("ZADD key score1 member1 [score2 member2]")]),v._v(" "),_("td",[v._v("向有序集合添加一个或多个成员，或者更新已存在成员的分数")])]),v._v(" "),_("tr",[_("td",[v._v("ZCARD key")]),v._v(" "),_("td",[v._v("获取有序集合的成员数")])]),v._v(" "),_("tr",[_("td",[v._v("ZCOUNT key min max")]),v._v(" "),_("td",[v._v("计算在有序集合中指定区间分数的成员数")])]),v._v(" "),_("tr",[_("td",[v._v("ZINCRBY key increment member")]),v._v(" "),_("td",[v._v("有序集合中对指定成员的分数加上增量 increment")])]),v._v(" "),_("tr",[_("td",[v._v("ZINTERSTORE destination numkeys key [key ...]")]),v._v(" "),_("td",[v._v("计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")])]),v._v(" "),_("tr",[_("td",[v._v("ZLEXCOUNT key min max")]),v._v(" "),_("td",[v._v("在有序集合中计算指定字典区间内成员数量")])]),v._v(" "),_("tr",[_("td",[v._v("ZRANGE key start stop [WITHSCORES]")]),v._v(" "),_("td",[v._v("通过索引区间返回有序集合成指定区间内的成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZRANGEBYLEX key min max [LIMIT offset count]")]),v._v(" "),_("td",[v._v("通过字典区间返回有序集合的成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]")]),v._v(" "),_("td",[v._v("通过分数返回有序集合指定区间内的成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZRANK key member")]),v._v(" "),_("td",[v._v("返回有序集合中指定成员的索引")])]),v._v(" "),_("tr",[_("td",[v._v("ZREM key member [member ...]")]),v._v(" "),_("td",[v._v("移除有序集合中的一个或多个成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZREMRANGEBYLEX key min max")]),v._v(" "),_("td",[v._v("移除有序集合中给定的字典区间的所有成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZREMRANGEBYRANK key start stop")]),v._v(" "),_("td",[v._v("移除有序集合中给定的排名区间的所有成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZREMRANGEBYSCORE key min max")]),v._v(" "),_("td",[v._v("移除有序集合中给定的分数区间的所有成员")])]),v._v(" "),_("tr",[_("td",[v._v("ZREVRANGE key start stop [WITHSCORES]")]),v._v(" "),_("td",[v._v("返回有序集中指定区间内的成员，通过索引，分数从高到底")])]),v._v(" "),_("tr",[_("td",[v._v("ZREVRANGEBYSCORE key max min [WITHSCORES]")]),v._v(" "),_("td",[v._v("返回有序集中指定分数区间内的成员，分数从高到低排序")])]),v._v(" "),_("tr",[_("td",[v._v("ZREVRANK key member")]),v._v(" "),_("td",[v._v("返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")])]),v._v(" "),_("tr",[_("td",[v._v("ZSCORE key member")]),v._v(" "),_("td",[v._v("返回有序集中，成员的分数值")])]),v._v(" "),_("tr",[_("td",[v._v("ZUNIONSTORE destination numkeys key [key ...]")]),v._v(" "),_("td",[v._v("计算给定的一个或多个有序集的并集，并存储在新的 key 中")])]),v._v(" "),_("tr",[_("td",[v._v("ZSCAN key cursor [MATCH pattern] [COUNT count]")]),v._v(" "),_("td",[v._v("迭代有序集合中的元素（包括元素成员和元素分值）")])])])]),v._v(" "),_("h3",{attrs:{id:"_8-hyperloglog-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-hyperloglog-命令"}},[v._v("#")]),v._v(" 8，HyperLogLog 命令")]),v._v(" "),_("ul",[_("li",[v._v("Redis HyperLogLog 是用来做基数统计的算法，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的； HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("PFADD key element [element ...]")]),v._v(" "),_("td",[v._v("添加指定元素到 HyperLogLog 中")])]),v._v(" "),_("tr",[_("td",[v._v("PFCOUNT key [key ...]")]),v._v(" "),_("td",[v._v("返回给定 HyperLogLog 的基数估算值")])]),v._v(" "),_("tr",[_("td",[v._v("PFMERGE destkey sourcekey [sourcekey ...]")]),v._v(" "),_("td",[v._v("将多个 HyperLogLog 合并为一个 HyperLogLog")])])])]),v._v(" "),_("h3",{attrs:{id:"_9-发布订阅模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-发布订阅模式"}},[v._v("#")]),v._v(" 9，发布订阅模式")]),v._v(" "),_("ul",[_("li",[v._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息，Redis 客户端可以订阅任意数量的频道。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("PSUBSCRIBE pattern [pattern ...]")]),v._v(" "),_("td",[v._v("订阅一个或多个符合给定模式的频道")])]),v._v(" "),_("tr",[_("td",[v._v("PUBSUB subcommand [argument [argument ...]]")]),v._v(" "),_("td",[v._v("查看订阅与发布系统状态")])]),v._v(" "),_("tr",[_("td",[v._v("PUBLISH channel message")]),v._v(" "),_("td",[v._v("将信息发送到指定的频道")])]),v._v(" "),_("tr",[_("td",[v._v("PUNSUBSCRIBE [pattern [pattern ...]]")]),v._v(" "),_("td",[v._v("退订所有给定模式的频道")])]),v._v(" "),_("tr",[_("td",[v._v("SUBSCRIBE channel [channel ...]")]),v._v(" "),_("td",[v._v("订阅给定的一个或多个频道的信息")])]),v._v(" "),_("tr",[_("td",[v._v("UNSUBSCRIBE [channel [channel ...]]")]),v._v(" "),_("td",[v._v("退订给定的频道")])])])]),v._v(" "),_("h3",{attrs:{id:"_10-redis-事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-redis-事务"}},[v._v("#")]),v._v(" 10，redis 事务")]),v._v(" "),_("ul",[_("li",[v._v("Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n"),_("ul",[_("li",[v._v("事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。")]),v._v(" "),_("li",[v._v("事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。一个事务从开始到执行会经历以下三个阶段：开始事务、命令入队、执行事务。")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("EXEC")]),v._v(" "),_("td",[v._v("执行所有事务块内的命令")])]),v._v(" "),_("tr",[_("td",[v._v("MULTI")]),v._v(" "),_("td",[v._v("标记一个事务块的开始")])]),v._v(" "),_("tr",[_("td",[v._v("DISCARD")]),v._v(" "),_("td",[v._v("取消事务，放弃执行事务块内的所有命令")])]),v._v(" "),_("tr",[_("td",[v._v("UNWATCH")]),v._v(" "),_("td",[v._v("取消 WATCH 命令对所有 key 的监视")])]),v._v(" "),_("tr",[_("td",[v._v("WATCH key [key ...]")]),v._v(" "),_("td",[v._v("监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断")])])])]),v._v(" "),_("h3",{attrs:{id:"_11-redis-服务器命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-redis-服务器命令"}},[v._v("#")]),v._v(" 11，redis 服务器命令")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("命令")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("BGREWRITEAOF")]),v._v(" "),_("td",[v._v("异步执行一个 AOF（AppendOnly File） 文件重写操作")])]),v._v(" "),_("tr",[_("td",[v._v("BGSAVE")]),v._v(" "),_("td",[v._v("在后台异步保存当前数据库的数据到磁盘")])]),v._v(" "),_("tr",[_("td",[v._v("CLIENT KILL [ip:port] [ID client-id]")]),v._v(" "),_("td",[v._v("关闭客户端连接")])]),v._v(" "),_("tr",[_("td",[v._v("CLIENT LIST")]),v._v(" "),_("td",[v._v("获取连接到服务器的客户端连接列表")])]),v._v(" "),_("tr",[_("td",[v._v("CLIENT GETNAME")]),v._v(" "),_("td",[v._v("获取连接的名称")])]),v._v(" "),_("tr",[_("td",[v._v("CLIENT PAUSE timeout")]),v._v(" "),_("td",[v._v("在指定时间内终止运行来自客户端的命令")])]),v._v(" "),_("tr",[_("td",[v._v("CLIENT SETNAME connection-name")]),v._v(" "),_("td",[v._v("设置当前连接的名称")])]),v._v(" "),_("tr",[_("td",[v._v("CLUSTER SLOTS")]),v._v(" "),_("td",[v._v("获取集群节点的映射数组")])]),v._v(" "),_("tr",[_("td",[v._v("COMMAND")]),v._v(" "),_("td",[v._v("获取 Redis 命令详情数组")])]),v._v(" "),_("tr",[_("td",[v._v("COMMAND COUNT")]),v._v(" "),_("td",[v._v("获取 Redis 命令总数")])]),v._v(" "),_("tr",[_("td",[v._v("COMMAND GETKEYS")]),v._v(" "),_("td",[v._v("获取给定命令的所有键")])]),v._v(" "),_("tr",[_("td",[v._v("TIME")]),v._v(" "),_("td",[v._v("返回当前服务器时间")])]),v._v(" "),_("tr",[_("td",[v._v("COMMAND INFO command-name [command-name ...]")]),v._v(" "),_("td",[v._v("获取指定 Redis 命令描述的数组")])]),v._v(" "),_("tr",[_("td",[v._v("CONFIG GET parameter")]),v._v(" "),_("td",[v._v("获取指定配置参数的值")])]),v._v(" "),_("tr",[_("td",[v._v("CONFIG REWRITE")]),v._v(" "),_("td",[v._v("对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写")])]),v._v(" "),_("tr",[_("td",[v._v("CONFIG SET parameter value")]),v._v(" "),_("td",[v._v("修改 redis 配置参数，无需重启")])]),v._v(" "),_("tr",[_("td",[v._v("CONFIG RESETSTAT")]),v._v(" "),_("td",[v._v("重置 INFO 命令中的某些统计数据")])]),v._v(" "),_("tr",[_("td",[v._v("DBSIZE")]),v._v(" "),_("td",[v._v("返回当前数据库的 key 的数量")])]),v._v(" "),_("tr",[_("td",[v._v("DEBUG OBJECT key")]),v._v(" "),_("td",[v._v("获取 key 的调试信息")])]),v._v(" "),_("tr",[_("td",[v._v("DEBUG SEGFAULT")]),v._v(" "),_("td",[v._v("让 Redis 服务崩溃")])]),v._v(" "),_("tr",[_("td",[v._v("FLUSHALL")]),v._v(" "),_("td",[v._v("删除所有数据库的所有key")])]),v._v(" "),_("tr",[_("td",[v._v("FLUSHDB")]),v._v(" "),_("td",[v._v("删除当前数据库的所有key")])]),v._v(" "),_("tr",[_("td",[v._v("INFO [section]")]),v._v(" "),_("td",[v._v("获取 Redis 服务器的各种信息和统计数值")])]),v._v(" "),_("tr",[_("td",[v._v("LASTSAVE")]),v._v(" "),_("td",[v._v("返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示")])]),v._v(" "),_("tr",[_("td",[v._v("MONITOR")]),v._v(" "),_("td",[v._v("实时打印出 Redis 服务器接收到的命令，调试用")])]),v._v(" "),_("tr",[_("td",[v._v("ROLE")]),v._v(" "),_("td",[v._v("返回主从实例所属的角色")])]),v._v(" "),_("tr",[_("td",[v._v("SAVE")]),v._v(" "),_("td",[v._v("异步保存数据到硬盘")])]),v._v(" "),_("tr",[_("td",[v._v("SHUTDOWN [NOSAVE] [SAVE]")]),v._v(" "),_("td",[v._v("异步保存数据到硬盘，并关闭服务器")])]),v._v(" "),_("tr",[_("td",[v._v("SLAVEOF host port")]),v._v(" "),_("td",[v._v("将当前服务器转变为指定服务器的从属服务器(slave server)")])]),v._v(" "),_("tr",[_("td",[v._v("SLOWLOG subcommand [argument]")]),v._v(" "),_("td",[v._v("管理 redis 的慢日志")])]),v._v(" "),_("tr",[_("td",[v._v("SYNC")]),v._v(" "),_("td",[v._v("用于复制功能(replication)的内部命令")])])])]),v._v(" "),_("h2",{attrs:{id:"三、redis-高级教程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、redis-高级教程"}},[v._v("#")]),v._v(" 三、redis 高级教程")]),v._v(" "),_("h3",{attrs:{id:"_1-redis-的备份与恢复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-的备份与恢复"}},[v._v("#")]),v._v(" 1，redis 的备份与恢复")]),v._v(" "),_("ul",[_("li",[v._v("redis 中的 save 命令，将数据备份到 dump.rdb 文件中，并将该文件存放在安装目录中，可以通过 config get dir 获取 redis 安装目录，只需要将该文件放在安装目录，并启动服务便可恢复数据。")])]),v._v(" "),_("h3",{attrs:{id:"_2-redis-的安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis-的安全"}},[v._v("#")]),v._v(" 2，redis 的安全")]),v._v(" "),_("ul",[_("li",[v._v('redis 可以通过 config set requirepass "passwd" 来设置密码，config get requirepass 来获取设置的密码，这样客户端连接到 redis 服务时就需要密码验证了；通过 auth passwd 来验证密码是否设置。')])]),v._v(" "),_("h3",{attrs:{id:"_3-redis-管道技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis-管道技术"}},[v._v("#")]),v._v(" 3，redis 管道技术")]),v._v(" "),_("ul",[_("li",[v._v("redis 是一种基于客户端-服务端模型以及请求/响应协议的 TCP 服务。客户端向服务端发送一个查询请求，并监听 Socket 返回，通常以阻塞模式等待服务端响应的，服务端处理完命令，并将结果返回给客户端。")]),v._v(" "),_("li",[v._v("redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。")])]),v._v(" "),_("h3",{attrs:{id:"_4-redis-分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-分区"}},[v._v("#")]),v._v(" 4，redis 分区")]),v._v(" "),_("ul",[_("li",[v._v("分区是分割数据到多个 redis 实例的处理过程，因此每个实例只保存 key 的一个子集。")]),v._v(" "),_("li",[v._v("分区的优势：\n"),_("ul",[_("li",[v._v("通过多台计算机内存和值，构造更大的数据库；")]),v._v(" "),_("li",[v._v("通过多核和多台计算机，扩展计算能力；")]),v._v(" "),_("li",[v._v("通过多台计算机和网络适配器，允扩展网络带宽；")])])]),v._v(" "),_("li",[v._v("分区的不足：\n"),_("ul",[_("li",[v._v("涉及多个 key 的操作通常是不被支持的，eg：当两个 set 映射到不同的 redis 实例上时，你就不能对这两个set执行交集操作；")]),v._v(" "),_("li",[v._v("涉及多个 key 的 redis 事务不能使用；")]),v._v(" "),_("li",[v._v("数据处理较为复杂，从多个实例和主机备份持久化文件时，需要处理多个 rdb/aof 文件；")]),v._v(" "),_("li",[v._v("增加或删除容量也比较复杂，redis 集群大多数支持在运行时增加、删除节点的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性；")])])]),v._v(" "),_("li",[v._v("分区类型：\n"),_("ul",[_("li",[v._v("范围分区：映射一定范围的对象到特定的 Redis 实例，需要一个区间范围到实例的映射表，这个表要被管理，同时还需要各种对象的映射表，通常对 Redis 来说并非是好的方法；")]),v._v(" "),_("li",[v._v("哈希分区：对任何 key 都适用，用一个 hash 函数将 key 转换为一个数字，对这个整数取模，将其转化为 0 ~ n-1 之间的数字，就可以将这个整数映射到 n 个 Redis 实例中的一个了；")])])])])])}),[],!1,null,null,null);_.default=d.exports}}]);