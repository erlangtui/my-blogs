(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{379:function(t,r,e){"use strict";e.r(r);var a=e(4),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"http-1-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),r("h3",{attrs:{id:"存在的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[t._v("#")]),t._v(" 存在的问题")]),t._v(" "),r("ol",[r("li",[t._v("默认为短连接，连接无法复用，网页中的每个资源都会发起新的 TCP 连接")]),t._v(" "),r("li",[t._v("队列头部请求阻塞 (head of line blocking), 一个 HTTP 请求响应结束之后，才能发起下一个 HTTP 请求 (如果没有某个特别慢的请求，就卡顿了 …)")]),t._v(" "),r("li",[t._v("不支持范围数据请求，即使只是需要某个资源的一部分内容 (例如视频的某一段帧)，也会将整个资源发送过来")])]),t._v(" "),r("p",[t._v("这几个问题已经全部消失在历史长河中了，这里简单回顾下，不做详细介绍了。")]),t._v(" "),r("h2",{attrs:{id:"http-1-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),r("p",[t._v("首先增加了以下特性解决了 HTTP/1.0 存在的问题:")]),t._v(" "),r("ul",[r("li",[t._v("默认启用长连接")]),t._v(" "),r("li",[t._v("支持同时打开多个 TCP 连接，采用 Pipeline 请求方式，多个请求可以通过多个连接串行化请求")]),t._v(" "),r("li",[t._v("支持资源分块范围数据传输")])]),t._v(" "),r("p",[t._v("此外，还新增了以下新特性:")]),t._v(" "),r("ul",[r("li",[t._v("支持虚拟主机")]),t._v(" "),r("li",[t._v("新增 Cache-Control、E-Tag, max-age 缓存处理指令")]),t._v(" "),r("li",[t._v("新增 PUT、PATCH、HEAD、OPTIONS、DELETE 请求方法")])]),t._v(" "),r("h3",{attrs:{id:"依然存在的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依然存在的问题"}},[t._v("#")]),t._v(" 依然存在的问题")]),t._v(" "),r("ul",[r("li",[t._v("虽然 TCP 连接可以复用，但是服务端响应只能按照客户端请求顺序返回，队列头部请求阻塞 (head of line blocking) 并没有完全解决")]),t._v(" "),r("li",[t._v("客户端需要使用多个连接才能实现并发和缩短延迟")]),t._v(" "),r("li",[t._v("无法压缩请求和响应头部，导致不必要的数据传输流量")]),t._v(" "),r("li",[t._v("不支持有效的资源优先级，导致 TCP 连接的利用率低")])]),t._v(" "),r("h2",{attrs:{id:"http-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),r("p",[r("strong",[t._v("HTTP/1 是文本协议")]),t._v("，其中 Header 头信息是文本数据，内容体数据可以是文本格式，也可以是二进制格式。"),r("strong",[t._v("HTTP/2 是二进制协议")]),t._v("，Header 头信息和内容体数据都是二进制的。")]),t._v(" "),r("h3",{attrs:{id:"二进制分帧层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧层"}},[t._v("#")]),t._v(" 二进制分帧层")]),t._v(" "),r("p",[t._v("HTTP/2 在 应用层(HTTP/2)和传输层(TCP or UDP)之间增加一个二进制分帧层。在不改动 HTTP/1.1 的语义、方法、状态码、URI 以及头部字段的情况下, 解决了HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_frame.jpg",alt:"图片来源: https://hpbn.co/http2/"}})]),t._v(" "),r("p",[t._v("HTTP/2 将一个 HTTP 请求划分为 3 个部分：")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("帧 (Frame)")]),t._v(" : 一段二进制数据，是 HTTP/2 传输的最小单位，每个帧包含一个帧头，用于标识该帧所属的流，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装数据")]),t._v(" "),r("li",[r("strong",[t._v("消息 (Message)")]),t._v(" : 和请求或响应对应的多个帧序列")]),t._v(" "),r("li",[r("strong",[t._v("流 (Stream)")]),t._v(" : 已建立的连接内的双向数据字节流，可以承载一条或多条消息，每个流都有一个唯一标识符和可选的优先级信息，由客户端发起的流必须使用奇数编号作为标识符；由服务器发起的必须使用偶数编号作为标识符，流标识符零(0x0)用于连接控制消息")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_stream.png",alt:"图片来源: https://hpbn.co/http2/"}})]),t._v(" "),r("h3",{attrs:{id:"请求-响应-多路复用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求-响应-多路复用"}},[t._v("#")]),t._v(" 请求/响应 多路复用")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_multiplexing.png",alt:"图片来源: https://blog.cloudflare.com/http-2-for-web-developers/"}})]),t._v(" "),r("blockquote",[r("p",[t._v("在整个通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流 (Stream)。")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_conn.jpg",alt:"图片来源: https://hpbn.co/http2/"}})]),t._v(" "),r("p",[t._v("如图所示，客户端正在向服务端传输 stream 5，服务端正在向客户端交替传输 stream 1 和 stream 3, 因此存在 3 个并行的流 (3 个流位于双向的一条 TCP 连接上面)。")]),t._v(" "),r("p",[t._v("这种单连接多资源的方式，减少服务端的链接压力 (主要是握手和开启 HTTPS 后的验证), 内存占用更少 (连接队列), 连接吞吐量更大；而且由于 TCP 连接的减少而使网络拥塞状况得以改善 (减少 TCP 三次握手、开启 HTTPS 后的 TLS 握手)， 同时慢启动时间的减少,使拥塞和丢包恢复速度更快 (因为当发生丢包时，TCP拥塞窗口大小会因为拥塞避免机制而减小，从而降低整个连接的最大吞吐量)。")]),t._v(" "),r("p",[t._v("通过二进制分帧层，可以解决 HTTP/1.1 中依然存在的 "),r("strong",[t._v("队列头部请求阻塞")]),t._v(" (head of line blocking) 和 "),r("strong",[t._v("客户端需要多个连接")]),t._v(" 两个问题。")]),t._v(" "),r("blockquote",[r("p",[t._v("💡 该方案的本质是多路复用，这里的「多路」指多个资源请求，「复用」指在同一个 TCP 连接上传输。")])]),t._v(" "),r("p",[t._v("在 HTTP/1.1 协议中浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。 这也是为何一些站点会有多个静态资源 CDN 域名的原因之一，而 HTTP/2 的多路复用(Multiplexing) 则允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。 因此 HTTP/2 可以很容易地去实现多流并行而不用依赖建立多个 TCP 连接，HTTP/2 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。")]),t._v(" "),r("h4",{attrs:{id:"为什么只有一个-tcp-连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么只有一个-tcp-连接"}},[t._v("#")]),t._v(" 为什么只有一个 TCP 连接？")]),t._v(" "),r("p",[t._v("在 HTTP/1.1 协议中浏览器打开单个域名网站可能会使用多个连接 (实现多站点传输)，结果就是单个站点页面加载时会打开数十个 TCP 连接。 一个应用程序打开如此多的 TCP 连接，这已经远远超出了最初的 TCP 设计理念，而且由于每个 TCP 连接都会响应大量的数据，会增加网络缓冲区的溢出风险，导致网络拥塞事件并重新开始数据传输。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_129_1.png",alt:"图片来源: https://halfrost.com/http2_begin/"}})]),t._v(" "),r("h3",{attrs:{id:"请求优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求优先级"}},[t._v("#")]),t._v(" 请求优先级")]),t._v(" "),r("p",[t._v("多个 HTTP 请求同时发送时，会产生多个数据流，每个数据流中有一个优先级的标识，服务器端可以根据这个标识来决定响应的优先顺序。")]),t._v(" "),r("ol",[r("li",[t._v("每个数据流可以分配一个 1 到 256 之间的整数作为其权重值")]),t._v(" "),r("li",[t._v("每个数据流可以被指定对另一个数据流的显式依赖")])]),t._v(" "),r("p",[t._v("对于浏览器来说，并非所有资源都拥有同样的优先级 (例如大多数情况下 HTML 文件应该比 CSS 文件拥有更高的优先级)，为了加速页面访问，现代浏览器都会根据资源的具体类型和在页面上的位置进行优先级排序， 甚至会根据历史访问响应时间记录来学习优先级，例如某个资源在之前访问时被阻塞了，那么这个资源在将来的访问中会获得更好的优先级。")]),t._v(" "),r("p",[t._v("通过设置合理的请求优先级，可以有效缓解 "),r("strong",[t._v("队列头部请求阻塞")]),t._v(" (head of line blocking) 和 "),r("strong",[t._v("TCP 连接的利用率低")]),t._v(" 两个问题。 默认情况下，浏览器的优先级机制已经优化的足够好，无需在代码层面设置资源优先级。")]),t._v(" "),r("h3",{attrs:{id:"服务端推送"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端推送"}},[t._v("#")]),t._v(" 服务端推送")]),t._v(" "),r("p",[t._v("HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。")]),t._v(" "),r("p",[t._v("例如客户端请求 page.html 页面，服务端顺带着就把 script.js 和 style.css 等相关的资源一起发给客户端。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_server_push.png",alt:"HTTP/2 Server Push"}})]),t._v(" "),r("p",[t._v("推送的资源有如下特点:")]),t._v(" "),r("ul",[r("li",[t._v("可以被客户端 (一般指浏览器) 缓存")]),t._v(" "),r("li",[t._v("可以被不同的页面进行复用")]),t._v(" "),r("li",[t._v("可以被服务端确定优先级")]),t._v(" "),r("li",[t._v("客户端完全控制服务端的推送行为: 限制并发推送流的数量、调整初始流量控制窗口、控制流首次打开时推送的数据量、或者完全禁用服务端推送，这些首选项在 HTTP/2 建立连接时通过设置帧进行传递，并且可以随时更新")]),t._v(" "),r("li",[t._v("每个被推送的资源都是一个流，这允许客户端单独对其进行多路复用、优先级排序和数据处理，当然，推送的资源必须遵守同源策略")])]),t._v(" "),r("h4",{attrs:{id:"push-promise-帧"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#push-promise-帧"}},[t._v("#")]),t._v(" PUSH_PROMISE 帧")]),t._v(" "),r("p",[t._v("服务端的所有推送都是通过 PUSH_PROMISE 帧发起的，它表示服务端会将资源推送到客户端，并且允许服务端在客户端请求之前就发送相关资源给客户端。 这些资源可能是客户端未直接请求的，但服务端认为客户端可能会需要的资源。通过推送可以避免客户端发起额外的请求来获取这些资源，从而加快页面加载速度。 PUSH_PROMISE 帧包含了推送资源的相关信息，如资源的 URL、HTTP 头部等，客户端接收到 PUSH_PROMISE 帧，可以选择拒绝流 (通过 RST_STREAM 帧)，例如资源已经存在于客户端的缓存中。")]),t._v(" "),r("h3",{attrs:{id:"hpack-压缩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hpack-压缩"}},[t._v("#")]),t._v(" HPACK 压缩")]),t._v(" "),r("p",[t._v("HTTP/2 要求客户端和服务器同时维护和更新一个包含之前见过的头部字段表，从而避免了重复传输。 HTTP/2 中通信双方各自缓存一份头部字段表，如：把 Content-Type:text/html 存入索引表中，后续如果要用到这个头，只需要发送对应的索引号就可以了。")]),t._v(" "),r("p",[t._v("通过头部压缩，解决了 HTTP/1.1 中头部重复导致的不必要的数据传输问题。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_header_compress.png",alt:"HTTP/2 Header Compress"}})]),t._v(" "),r("p",[t._v("作为进一步的优化，"),r("code",[t._v("HPACK 压缩上下文")]),t._v(" 由静态和动态表组成:")]),t._v(" "),r("ul",[r("li",[t._v("静态表中定义了规范标准，主要提供连接可能会使用到的常见 HTTP 报头字段 (例如 host, path, method …)")]),t._v(" "),r("li",[t._v("动态表初始时为空，但是会根据特定连接内的不同字段值进行更新，通过对新出现的字段值使用 "),r("code",[t._v("Huffman")]),t._v(" 编码，以及对 客户端/服务端 双方静态表或动态表中已经存在的字段值更新索引，可以减少每个请求的大小")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_hpack.png",alt:"HTTP/2 Header Compress"}})]),t._v(" "),r("h3",{attrs:{id:"流控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流控制"}},[t._v("#")]),t._v(" 流控制")]),t._v(" "),r("p",[t._v("流控制是一种发送方与接收方之间的协商机制，防止双方向对方发送大量数据时，造成对方负载过重，或者限制特定资源的流量速率。 例如客户端请求了一个高优先级的大视频流，但是用户观看几秒后暂停了，此时客户端应该暂停或限制其从服务器端的数据传输，避免请求和缓冲不必要的数据。")]),t._v(" "),r("p",[t._v("本质上这是一个流量控制问题，也许你会想到 TCP 中的流量控制机制，但是 HTTP/2 是使用单个 TCP 连接进行多路复用的，这样一来， TCP 传输层流量控制既没有足够的流量控制粒度 (没有办法以 HTTP 请求资源为粒度进行控制，因为得不偿失，会直接浪费掉多路复用带来的所有好处)， 也没有必要提供应用层的 API 来控制单个流的传输控制。为了解决这个问题，HTTP/2 提供了一组简单的构建块，允许客户端和服务端实现自己的连接控制和流控制。")]),t._v(" "),r("p",[t._v("HTTP/2 流控制具体的规则如下:")]),t._v(" "),r("ul",[r("li",[t._v("流控制是定向的，接收方 (客户端/服务端都是彼此的接收方) 可以选择为每个流和整个连接设置窗口大小")]),t._v(" "),r("li",[t._v("流控制是基于窗口机制的，接收方会其初始连接和流控制窗口（以字节为单位），当发送方发出数据帧时，该窗口就会减少，当发送方接收到来自接收方发送的 WINDOW_UPDATE 帧时，该窗口就会增加")]),t._v(" "),r("li",[t._v("无法禁用流控制，当建立 HTTP/2 连接时，客户端和服务器交换 SETTINGS 帧，用来设置两个方向的流量控制窗口大小，流量控制窗口的默认值设置为 65535 字节， 最大窗口大小为（2^31 - 1 字节），并通过在接收到数据时发送 WINDOW_UPDATE 帧来更新")])]),t._v(" "),r("p",[r("strong",[t._v("HTTP/2 没有指定任何特定的算法来实现流量控制")]),t._v("，它仅提供了简单的构建块，并将实现委托给客户端和服务器，客户端和服务器可以使用它实现自定义策略调节资源分配。 应用层流量控制允许浏览器只获取特定资源的一部分，通过将流量控制窗口 (WINDOW_UPDATE) 减少到零来实现暂停资源获取，然后在合适的时间再进行恢复。 例如获取图像的预览图 (该图像内容的一部分)，显示预览图的同时允许其他高优先级的请求继续获取，并在优先级更高的资源完成加载后恢复继续图像的获取请求。")]),t._v(" "),r("h3",{attrs:{id:"一次-http-2-通信示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一次-http-2-通信示例"}},[t._v("#")]),t._v(" 一次 HTTP/2 通信示例")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_req_and_resp.png",alt:"HTTP/2 通信过程"}})]),t._v(" "),r("ol",[r("li",[t._v("首次访问时，浏览器请求头部加上 upgrade: h2c 标识，声明客户端支持 HTTP/2，询问服务器要不要更换协议")]),t._v(" "),r("li",[t._v("浏览器同时发送 HTTP/2-Settings 头部，带上 base64 编码的 SETTINGS frame")]),t._v(" "),r("li",[t._v("对于 HTTPS 请求，是在 TLS 握手阶段进行协商，浏览器发送 ClientHello 时，带上 h2 标志，表明客户端支持 HTTP/2")]),t._v(" "),r("li",[t._v("如果服务器不支持，则忽略 upgrade 头部，正常响应。如果支持，则发送101响应，以空行结束响应，并开始发送 HTTP/2帧")]),t._v(" "),r("li",[t._v("服务器要先响应 connection preface，带上 SETTINGS frame")]),t._v(" "),r("li",[t._v("服务器创建新流，推送 a.js。然后继续发送 index.html 文件和 a.js 文件的response header、response body")]),t._v(" "),r("li",[t._v("浏览器收到 PUSH_PROMISE 帧，发现服务器要推送的内容已经在浏览器缓存里了，发送 RST_STREAM 拒绝推送")]),t._v(" "),r("li",[t._v("服务器收到 RST_STREAM 帧后，不再推送 a.js 文件剩余的数据")]),t._v(" "),r("li",[t._v("服务器想要关闭连接，发送 GOAWAY 帧")])]),t._v(" "),r("h3",{attrs:{id:"检测是否支持-http-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#检测是否支持-http-2"}},[t._v("#")]),t._v(" 检测是否支持 HTTP/2")]),t._v(" "),r("p",[t._v("通过 CURL 命令来检测网站是否支持 HTTP/2 协议。")]),t._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-I")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://dbwu.tech"')]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出如下")]),t._v("\n\nHTTP/2 "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" \ndate: Sun, "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" Jan "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),t._v(" 04:15:29 GMT\ncontent-type: text/html"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br")])]),r("p",[t._v("直接使用 –http/2 参数指定 CURL 请求使用 HTTP/2 协议。")]),t._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" --http/2 "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://dbwu.tech"')]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("也可以通过 "),r("a",{attrs:{href:"https://http2.pro/check",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线工具"),r("OutboundLink")],1),t._v(" 进行检测。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_check.png",alt:"HTTP/2 在线检测工具"}})]),t._v(" "),r("h3",{attrs:{id:"http-1-升级后过时的优化方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-1-升级后过时的优化方案"}},[t._v("#")]),t._v(" HTTP/1 升级后过时的优化方案")]),t._v(" "),r("p",[t._v("升级到 HTTP/2 之后，很多 HTTP/1 中的优化方案，在 HTTP/2 中就没有存在的必要了，例如下面这些曾经的 “经典” 优化方案:")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Sprites")]),t._v(": 将很多小图合并成一张大图，再利用 CSS 和 JavaScript 将小图定位并切割出来 (常见的业务场景如 Logo 图集、网页游戏道具等)")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/css_sprites.png",alt:"图片来源: https://www.formget.com/css-image-sprites"}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Inlining")]),t._v(": 将图片的原始数据 base64 编码之后嵌入到 CSS 属性中 (可以节约一次 HTTP 请求)")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/css_image.png",alt:"图片来源: https://stackoverflow.com/questions/41762836/what-is-base-64-fonts-for-css"}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Concatenation")]),t._v(": 将许多小的静态文件合并到一个大的静态文件中")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http1_concat.png",alt:"图片来源: https://blog.cloudflare.com/http-2-for-web-developers/"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http2_concat.png",alt:"图片来源: https://blog.cloudflare.com/http-2-for-web-developers/"}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Sharding")]),t._v(": 将静态资源分发到不同的域名 (即使没有 HTTP/2, 这个方案也可以使用 CDN 来替代，方案的核心在于并发 TCP 连接以及优化 cookies)")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http_domain_sharing.png",alt:"图片来源: https://blog.cloudflare.com/http-2-for-web-developers/"}})]),t._v(" "),r("h3",{attrs:{id:"http-1-升级后仍然有效的的优化方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-1-升级后仍然有效的的优化方案"}},[t._v("#")]),t._v(" HTTP/1 升级后仍然有效的的优化方案")]),t._v(" "),r("p",[t._v("除了上述升级到 HTTP/2 失效的优化方案外，大部分在 HTTP/1 优化的方案在 HTTP/2 中仍然有效吗，例如下面这些方案:")]),t._v(" "),r("ul",[r("li",[t._v("降低 DNS 轮询 (可以参考主流云计算厂商提供的解决方案及实现原理)")]),t._v(" "),r("li",[t._v("使用 CDN (并且根据业务场景和服务进行设计拆分)")]),t._v(" "),r("li",[t._v("尽可能使用浏览器缓存机制")]),t._v(" "),r("li",[t._v("尽可能优化请求响应时间和响应内容大小")]),t._v(" "),r("li",[t._v("尽可能消除重定向")])]),t._v(" "),r("h3",{attrs:{id:"http-2-的优化空间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-2-的优化空间"}},[t._v("#")]),t._v(" HTTP/2 的优化空间")]),t._v(" "),r("p",[t._v("HTTP/2 针对基于 TCP 协议栈的 HTTP 优化，几乎上已经达到了最大化，如果需要继续深入优化，只能从协议栈本身的架构做调整，当然也就是 HTTP/3 协议主要做的工作。")]),t._v(" "),r("p",[t._v("优化核心目标依然是 TCP 的可靠性机制导致的传输效率和延迟问题:")]),t._v(" "),r("ul",[r("li",[t._v("TCP 建立连接时的三次握手，增加了请求延时")]),t._v(" "),r("li",[t._v("TCP 内部的拥塞控制、慢启动、拥塞避免等机制，可能导致传输效率不足")]),t._v(" "),r("li",[t._v("HTTP/2 虽然解决了 HTTP/1 协议中的 "),r("strong",[t._v("队列头部请求阻塞")]),t._v(" (head of line blocking) 问题，但是 TCP 协议也存在类似的问题: TCP 在传输时使用序列号标识数据的顺序，一旦某个数据丢失，后面的数据需要等待这个数据重传后才能进行下一步处理")]),t._v(" "),r("li",[t._v("根据测试表明，在较差的网络环境中 (丢包率 >= 2%)，HTTP/2 的性能甚至不如 HTTP/1, 因为 HTTP/1 一般会打开多个 TCP 连接，即使其中一个或多个连接出现丢包，剩下的连接依然可以进行数据传输")])]),t._v(" "),r("h2",{attrs:{id:"http-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),r("p",[t._v("HTTP/3 是基于 QUIC（Quick UDP Internet Connections）协议的新一代 HTTP 协议。")]),t._v(" "),r("h3",{attrs:{id:"quic"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" QUIC")]),t._v(" "),r("blockquote",[r("p",[t._v("QUIC 是由 Google 提出的基于 UDP 进行多路复用的传输协议，是一个 UDP 版的 TCP + TLS + HTTP/2 替代方案实现。 QUIC 没有连接的概念，不需要三次握手，在应用程序层面，实现了 TCP 的可靠性，TLS 的安全性和 HTTP2 的并发性。 在设备支持层面，只需要客户端和服务端的应用程序支持 QUIC 协议即可，无操作系统和中间设备的限制。")])]),t._v(" "),r("p",[t._v("QUIC 丢掉了 TCP 的包袱，基于 UDP，实现了一个安全高效可靠的 HTTP 通信协议。凭借着 0-RTT 建立连接、传输层多路复用、连接迁移、改进的拥塞控制、流量控制等特性，QUIC 在绝大多数场景下获得了比 HTTP/2 更好的效果。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_with_http2.png",alt:"HTTP/2 和 HTTP/3 的协议栈比较"}})]),t._v(" "),r("h3",{attrs:{id:"题外话"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题外话"}},[t._v("#")]),t._v(" 题外话")]),t._v(" "),r("p",[r("strong",[t._v("为什么不发明一个新的传输协议")]),t._v("？")]),t._v(" "),r("p",[t._v("事实上，面对传统传输层 TCP 和 UDP 协议的各种问题和不足，创新型的传输层协议最终都没有能成为行业标准。因为这不单单是技术问题， 客户端与服务端之间要经过网络中的运营商防火墙、路由器、NAT 等，这些设备中很多默认只支持 TCP 和 UDP 协议，那么可想而知，新型协议根本无法在互联网普及。 而且，即使上述所有的中间设备想要支持新型协议，那么更新和部署新的网络协议栈、操作系统内核等基础设施和软件，必然是一个十分缓慢的过程，在此期间造成的停机等问题引起的经济损失可能是无法估量的。")]),t._v(" "),r("h3",{attrs:{id:"核心优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心优化"}},[t._v("#")]),t._v(" 核心优化")]),t._v(" "),r("blockquote",[r("p",[t._v("最重要的优化就是使用 QUIC 协议代替了 HTTP/2 中的依赖的 TCP 协议栈。")])]),t._v(" "),r("h4",{attrs:{id:"_0-rtt"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_0-rtt"}},[t._v("#")]),t._v(" 0-RTT")]),t._v(" "),r("p",[t._v("QUIC 协议可以实现 0-RTT 建立连接 (0-RTT 是指通信双方发起通信连接时，第一个数据包就可以携带有效的业务数据)，而 TCP 需要 3-RTT 建立连接，这个优势不止体现在初始建立连接时，在网络发生变化时同样适用。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_quic_tcp.png",alt:"图片来源: https://en.wikipedia.org/wiki/QUIC"}})]),t._v(" "),r("p",[t._v("关于 0-RTT，需要说明的是: "),r("strong",[t._v("如果客户端和服务器是第一次通信，那么需要经过 1-RTT (主要是客户端获取服务端加密配置)，如果已经有过一次通信之后， 后续客户端和服务端的通信连接就是 0-RTT")]),t._v("。限于篇幅，第一次客户端连接到服务端获取密钥及加密配置的过程，本文不再展开描述。")]),t._v(" "),r("h4",{attrs:{id:"多路复用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_multiplexing.png",alt:"图片来源: https://www.debugbear.com/blog/http3-quic-protocol-guide"}})]),t._v(" "),r("p",[t._v("QUIC 中的每个 stream 之间是相互独立的，单个 stream 丢失了，不会影响到其他 stream，QUIC 协议在发送数据时会拆分为多个包， 这样就完全解决了 "),r("strong",[t._v("队列头部请求阻塞")]),t._v(" (head of line blocking) 问题。 尽管 QUIC 消除了 HTTP/2 的队列头部请求阻塞问题，但其依赖的 UDP 本身是无序交付的，也就是数据不一定按照发送时的顺序到达， (所以并不是切换到 HTTP/3 就万事大吉了，客户端和服务端必须要根据实际业务场景，尝试做更多的优化工作)。")]),t._v(" "),r("h4",{attrs:{id:"单调递增的序列号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单调递增的序列号"}},[t._v("#")]),t._v(" 单调递增的序列号")]),t._v(" "),r("p",[t._v("TCP 中，每一个数据包都有一个序列号标识（seq），如果接收端超时没有收到，就会要求重发标识为 seq 的包，如果此时恰好接受到了超时的包， 则无法区分哪个是超时的包，哪个是重传的包。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("RTT")]),t._v(": Round Trip Time, 往返事件")]),t._v(" "),r("li",[r("strong",[t._v("RTO")]),t._v(": Retransmission Timeout, 超时重传时间")])]),t._v(" "),r("p",[t._v("如果客户端认为收到的包是重传包，但是实际是超时的包，这样就会导致计算出来的 RTT 值偏小，反之计算出来的 RTT 值偏大。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_rtt_2.png",alt:"示例: RTT 值偏小"}})]),t._v(" "),r("p",[t._v("在上面的示例图中，RTT 计算出来的 RTT 值比实际值要小。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_rtt_1.png",alt:"示例: RTT 值偏大"}})]),t._v(" "),r("p",[t._v("在上面的示例图中，RTT 计算出来的 RTT 值比实际值要大。")]),t._v(" "),r("p",[r("strong",[t._v("QUIC 中的每一个包的标识（Packet Number）都是单调递增的")]),t._v("，重传的序号一定大于超时的序号，这样就能有效地区分超时和重传。")]),t._v(" "),r("h4",{attrs:{id:"禁止-reneging"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#禁止-reneging"}},[t._v("#")]),t._v(" 禁止 Reneging")]),t._v(" "),r("p",[t._v("TCP 中，如果接收方内存不够或 Buffer 溢出，则可能会把已接收的包丢弃，这种行为对数据重传产生了很大的干扰，在 QUIC 中是明确禁止的。在 QUIC 中，一个包只要被 ACK ，就认为一定会被正确接收。")]),t._v(" "),r("h4",{attrs:{id:"批量-ack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#批量-ack"}},[t._v("#")]),t._v(" 批量 ACK")]),t._v(" "),r("p",[t._v("TCP 中每收到 3 个数据包就要返回一个 ACK，而 QUIC 最多可以收到 256 个包之后，才返回 ACK。在丢包率比较严重的网络下，更多的 ACK 块可以减少重传量，提升网络效率。")]),t._v(" "),r("h4",{attrs:{id:"ack-delay"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ack-delay"}},[t._v("#")]),t._v(" ACK Delay")]),t._v(" "),r("p",[t._v("TCP 计算 RTT 时没有考虑接收方接收到数据到发送确认消息之间的延迟，也就是所谓的 ACK Delay。QUIC 充分考虑到 ACK Delay，这样 RTT 的计算会更加准确。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_ack_delay.png",alt:"图片来源: https://assets.extrahop.com/whitepapers/TCP-Optimization-Guide-by-ExtraHop.pdf"}})]),t._v(" "),r("h4",{attrs:{id:"流量控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),r("p",[t._v("TCP 通过滑动窗口来控制流量，如果某一个包丢失了，滑动窗口并不能跨过丢失的包继续滑动，而是会卡在丢失的位置，等待数据重传后，才能继续滑动。")]),t._v(" "),r("p",[t._v("QUIC 流量控制的核心是：不能建立太多的连接，以免响应端处理不过来；不能让某一个连接占用大量的资源，让其他连接没有资源可用。 为此 QUIC 流量控制分为 "),r("strong",[t._v("连接级别和 Stream 级别")]),t._v(" :")]),t._v(" "),r("ul",[r("li",[t._v("Stream 级别流量控制中，接收窗口 = 最大接收窗口 - 已接收数据")]),t._v(" "),r("li",[t._v("连接级别流量控制中，接收窗口 = Stream1 接收窗口 + Stream2 接收窗口 + … + StreamN 接收窗口")])]),t._v(" "),r("h4",{attrs:{id:"连接迁移"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#连接迁移"}},[t._v("#")]),t._v(" 连接迁移")]),t._v(" "),r("p",[t._v("TCP 连接是由（源 IP，源端口，目的 IP，目的端口）组成，这个四元组中一旦有一项值发生改变，这个连接也就不能用了。如果我们从 wifi 网络切换到 4G 网络，IP 地址就会改变，这个时候 TCP 连接也自然断掉了。")]),t._v(" "),r("p",[t._v("QUIC 使用客户端生成的 64 位 ID 来表示一条连接，只要 ID 不变，这条连接也就一直维持着，不会中断。")]),t._v(" "),r("h4",{attrs:{id:"前向纠错机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前向纠错机制"}},[t._v("#")]),t._v(" 前向纠错机制")]),t._v(" "),r("p",[t._v("QUIC 使用前向纠错(FEC，Forward Error Correction)技术增加协议的容错性。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_fec.png",alt:"图片来源: https://www.xoriant.com/blog/quic-is-around-it-is-being-tested-on-you"}})]),t._v(" "),r("p",[t._v("如图所示，一段数据被切分为 10 个包后，依次对每个包进行异或运算，运算结果会作为 FEC 包与数据包一起被传输，如果不幸在传输过程中有一个数据包丢失， 那么就可以根据剩余 9 个包以及 FEC 包推算出丢失的那个包的数据，这样就大大增加了协议的容错性。")]),t._v(" "),r("p",[t._v("这是符合现阶段网络技术的一种方案，现阶段带宽已经不是网络传输的瓶颈，往返时间才是，所以新的网络传输协议可以适当增加数据冗余，减少重传操作。 当然这种情况只适用于丢失一个包的情况下，如果丢失了多个包，就只能进行重传了。")]),t._v(" "),r("h4",{attrs:{id:"qpack-压缩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#qpack-压缩"}},[t._v("#")]),t._v(" QPACK 压缩")]),t._v(" "),r("p",[t._v("QPACK 压缩是 HTTP/3 中使用的字段压缩格式，可以使 HTTP/2 中使用的 HPACK 压缩格式与 QUIC 协议兼容，两种压缩格式通过使用不同的机制来满足传输层协议的要求。")]),t._v(" "),r("p",[r("strong",[t._v("那么 HTTP/3 中为什么不能继续使用 HPACK 压缩格式呢")]),t._v("？")]),t._v(" "),r("p",[t._v("因为 HPACK 格式是为 TCP 协议创建的格式，这种格式工作的前提就是默认数据字节流按照顺序达到，如果 HTTP/3 中继续使用 HPACK 压缩格式， 就会导致额外的 "),r("strong",[t._v("队列头部请求阻塞 (head of line blocking)")]),t._v(" 问题，因为 HPACK 依赖于对已经到达字段的引用。但是，HTTP/3 中的 QUIC 的传输层协议为 UDP, 数据字节不会按照顺序到达，因此 HPACK 格式中的动态表中可能会包含还未达到的数据的引用，于是就会阻塞直到被引用的数据到达。")]),t._v(" "),r("p",[t._v("为了解决这个问题，QPACK "),r("strong",[t._v("引入了两种单向流类型: 编码器流和解码器流")]),t._v("，除了传递 HTTP/3 消息的双向字节流之外，客户端和服务端可以选择性地打开这两个单向编码流， 将具体的指令传输给对方。因为流是单向的，所以发送方只需要发送数据即可，无需等到接收方的响应。")]),t._v(" "),r("p",[t._v("最终，虽然增加额外的单向字节流会带来一定的性能开销，但是却可以彻底解决 "),r("strong",[t._v("队列头部请求阻塞 (head of line blocking)")]),t._v(" 问题，而且 QPACK 格式规范为客户端和服务器实现提供了很高的自由度， 可以由实现方来决定具体的问题重要程度和方案倾向性: 缓解并解决队列头部请求阻塞还是实现更高级别的压缩效果。")]),t._v(" "),r("h3",{attrs:{id:"quic-相比-tcp-的优势"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#quic-相比-tcp-的优势"}},[t._v("#")]),t._v(" QUIC 相比 TCP 的优势")]),t._v(" "),r("ul",[r("li",[t._v("QUIC 在用户空间实现而非内核，这样可以快速部署最新版本或自定义版本，TCP 在内核中实现，基本不太可能随时部署新版本")]),t._v(" "),r("li",[t._v("QUIC 具有更高级别的加密 (例如大部分 QUIC Header 都是加密的)，TCP 本身不做数据加密，需要依赖于 TLS")]),t._v(" "),r("li",[t._v("QUIC 建立在传输层协议栈上，意味着可以随时切换传输协议，有着非常高的灵活性 (例如可以将底层的 UDP 切换到 TCP)")])]),t._v(" "),r("h3",{attrs:{id:"quic-存在的限制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#quic-存在的限制"}},[t._v("#")]),t._v(" QUIC 存在的限制")]),t._v(" "),r("ul",[r("li",[t._v("性能提升很大程度上取决于 QUIC 方案的实施，这包括操作系统发行版、协议栈实现版本、QUIC 的实现版本等因素")]),t._v(" "),r("li",[t._v("使用 HTTP/3 之前需要进行 HTTP 版本协商，浏览器默认不支持 HTTP/3, 通常需要基于建立在 TCP 上的 HTTP/1 或 HTTP/2 来发送协商请求")]),t._v(" "),r("li",[t._v("增加网络管理复杂度，由于 QUIC 会加密大部分数据，因此排查网络错误、优化网络性能和安全性、设置报警规则等工作都变得更加困难，由于这些原因，很多防火墙还未支持 QUIC")]),t._v(" "),r("li",[t._v("许多网络攻击都是利用 UDP 发起的，据统计大概有 3% - 5% 的网络会直接过滤 UDP 请求 (DNS 等网络基础协议除外)")])]),t._v(" "),r("h3",{attrs:{id:"是否支持-http-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#是否支持-http-3"}},[t._v("#")]),t._v(" 是否支持 HTTP/3")]),t._v(" "),r("h4",{attrs:{id:"网站检测"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网站检测"}},[t._v("#")]),t._v(" 网站检测")]),t._v(" "),r("p",[t._v("可以通过 "),r("a",{attrs:{href:"https://domsignal.com/http3-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线工具"),r("OutboundLink")],1),t._v(" 进行检测。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http3_check.png",alt:"HTTP/3 在线检测工具"}})]),t._v(" "),r("h4",{attrs:{id:"浏览器支持情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器支持情况"}},[t._v("#")]),t._v(" 浏览器支持情况")]),t._v(" "),r("p",[t._v("可以通过 "),r("a",{attrs:{href:"https://caniuse.com/http3",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器在线工具"),r("OutboundLink")],1),t._v(" 进行检测，下面是笔者的 Chrome 支持情况。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://dbwu.tech/images/http_check_browser.png",alt:"HTTP/3 在线检测工具"}})]),t._v(" "),r("h2",{attrs:{id:"小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),r("p",[t._v("本文介绍了从 HTTP/1 到 HTTP/3 中间四次比较大的协议升级变更，着重分析了每次升级前后的性能差异及相关特性变更 (安全方面的变更未分析，感兴趣的读者可以自行阅读相关 RFC)。 作为开发者，平时可能不会去关注这些网络底层细节，但是深入理解整个HTTP 协议的升级变迁过程，可以帮助我们理解这背后的工程挑战以及解决思路，这才是最有价值的部分。")]),t._v(" "),r("h3",{attrs:{id:"终极用户体验模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#终极用户体验模式"}},[t._v("#")]),t._v(" 终极用户体验模式")]),t._v(" "),r("blockquote",[r("p",[t._v("浏览器作为操作系统，站点作为应用软件，这算不算是从 B/S 架构又回到了 C/S 架构？")])]),t._v(" "),r("h2",{attrs:{id:"转载地址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转载地址"}},[t._v("#")]),t._v(" 转载地址")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://dbwu.tech/posts/http_evolution/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://dbwu.tech/posts/http_evolution/"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"reference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc7540",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hypertext Transfer Protocol Version 2 (HTTP/2)"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc9000",target:"_blank",rel:"noopener noreferrer"}},[t._v("QUIC: A UDP-Based Multiplexed and Secure Transport"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://datatracker.ietf.org/doc/rfc9114/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/3"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://daniel.haxx.se/http2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 explained"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://hpbn.co/http2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://web.dev/performance-http2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to HTTP/2"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.cloudflare.com/zh-cn/learning/performance/what-is-http3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("what-is-http3"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/edit?pli=1#slide=id.p19",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 is here, let’s optimize!"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"扩展阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[t._v("#")]),t._v(" 扩展阅读")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://httpwg.org/specs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP Documentation Core Specifications"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/03/http2_server_push.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 服务器推送（Server Push）教程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.cloudflare.com/http-2-for-web-developers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 For Web Developers"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/HTTPArchive/almanac.httparchive.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Almanac"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://halfrost.com/http2-hpack-example/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 HPACK 实际应用举例"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://halfrost.com/http2-header-compression/",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解 HTTP/2 头压缩算法 —— HPACK"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/32553477",target:"_blank",rel:"noopener noreferrer"}},[t._v("QUIC协议原理分析"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/3 From A To Z: Core Concepts"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.debugbear.com/blog/http3-quic-protocol-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Comprehensive Guide To HTTP/3 And QUIC"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/draft-joseph-quic-comparison-quic-sctp-00",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Comparison between SCTP and QUIC"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.cloudflare.com/cloudflare-view-http3-usage/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP RFCs have evolved: A Cloudflare view of HTTP usage trends"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.cloudflare.com/better-http-3-prioritization-for-a-faster-web/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introducing HTTP/3 Prioritization"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/caddyserver/caddy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Caddy"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://httparchive.org/reports/state-of-the-web",target:"_blank",rel:"noopener noreferrer"}},[t._v("Report: State of the Web"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=s.exports}}]);